@using INV.App.PurchaseOrders
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div>
    <input type="number" @bind="searchNumber" min="1" placeholder="Search by order number" class="number-input" />
    <input type="date" @bind="searchDate" />
    <button class="search-button" @onclick="GetPurchaseOrder">Search</button>
</div>
<br />
<button type="button" class="addsupplier-button" @onclick="NavigateToPurchaseOrder"><i class="bi bi-cart-plus"></i>  Add a Purchase Order</button>

@if (purchaseOrderInfos is null)
{
    <h3>Loading...</h3>

}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Number</th>
            <th>Supplier Name</th>
            <th>Date</th>
            <th>State</th>
        </tr>
        </thead>
        <tbody>
        @foreach (PurchaseOrderInfo purchaseOrderInfo in purchaseOrderInfos)
        {
            <tr>
                <td>
                    <a href="/purchaseOrde/@purchaseOrderInfo.ID">
                        @purchaseOrderInfo.Number
                    </a>
                </td>
                <td>@purchaseOrderInfo.SupplierName</td>
                <td>@purchaseOrderInfo.Date</td>
                <td>@purchaseOrderInfo.State</td>
            </tr>
        }
        </tbody>
    </table>
}


@code{
    [Parameter] public List<PurchaseOrderInfo> purchaseOrderInfos { get; set; }
    private List<PurchaseOrderInfo> filteredOrders = new();
    [Inject] public IPurchaseOrderService purchaseOrderService { get; set; }

    private int? searchNumber;
    private DateTime? searchDate;
    private async Task GetPurchaseOrder()
    {
        if (searchDate.HasValue)
        {   DateOnly selectedDate = DateOnly.FromDateTime(searchDate.Value);
           //purchaseOrderInfos = await purchaseOrderService.GetPurchaseOrdersByDate(selectedDate);
            SearchOrders();
        }
    }

    private void SearchOrders()
    {
        DateOnly? selectedDate = searchDate.HasValue ? DateOnly.FromDateTime(searchDate.Value) : null;

        filteredOrders = purchaseOrderInfos.Where(order =>
            (!searchNumber.HasValue || order.Number == searchNumber.Value) &&
            (!selectedDate.HasValue || order.Date == selectedDate.Value)
        ).ToList();
    }
    private void NavigateToPurchaseOrder()
    {
        Navigation.NavigateTo("/purchaseOrder");
    } 
}