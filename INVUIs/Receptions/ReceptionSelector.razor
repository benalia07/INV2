@using INV.App.Receipts
@using INV.Domain.Shared
@using Microsoft.AspNetCore.Components
@using INV.App.Purchases
@using INV.Domain.Entities.SupplierEntity
@using INV.Shared
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@if (displayModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control mb-2" placeholder="Enter Supplier name or email" @bind-value="SearchTerm" @bind-value:event="oninput" />
                <div style="max-height:300px" class="overflow-auto">
                    <table class="table table-sm table-striped mb-0">
                        @foreach (var command in displayedItems)
                        {
                            <tr style="cursor: pointer">
                                <td>
                                    <a @onclick="() => selectItem(command)">@command.Date | @command.SupplierName | @command.Status</a>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick=@close>Close</button>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public NavigationManager Navigation { get; set; }

    [Parameter] public List<PurchaseOrderInfo> Command { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public EventCallback<Result<Guid>> OnSelected { get; set; }

    private bool displayModal = false;
    private string SearchTerm { get; set; } = "";

    private List<PurchaseOrderInfo> displayedItems =>
        Command?.Where(i => i.Date.ToString("yyyy-MM-dd").ToLower().Contains(SearchTerm?.ToLower() ?? string.Empty) == true ||
                            i.SupplierName?.ToLower().Contains(SearchTerm?.ToLower() ?? string.Empty) == true)
                .ToList() ?? new List<PurchaseOrderInfo>();

    private void close()
    {
        displayModal = false;
        StateHasChanged();
    }
    [Inject]
    public IReceiptService receiptService { set; get; }
    //private Result result; 

    private async void selectItem(PurchaseOrderInfo selected)
    {

        var result = await receiptService.CreateReceiptFromPurchase(selected.Id);

        //Navigation.NavigateTo($"/reception/{selected.Id}");
        close();
    }

    public void ShowModal()
    {
        displayModal = true;
        StateHasChanged();
    }

    public void ShowModal(List<PurchaseOrderInfo> command)
    {
        Command = command;
        ShowModal();
    }
}